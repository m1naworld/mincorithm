'''

선택 정렬은 전체에서 최솟값을 '선택' 하는 거 였다면,
삽입 정렬은 전체에서 하나씩 올바른 위치에 '삽입'하는 방식

선택 정렬은 현재 데이터의 상태와 상관없이 항상 비교하고 위치를 바꾸지만,
삽입 정렬은 필요할 때만 위치를 변경하므로 더 효율적인 방식이다.

버블 정렬과 선택 정렬은 최선이든 최악이든 항~~상 O(N^2) 만큼의 시간이 걸렸지만,
삽입 정렬은 최선의 경우에는 Ω(N) 만큼의 시간 복잡도가 걸린다.
'''


'''
Q. 다음과 같이 숫자로 이루어진 배열이 있을 때, 오름차순으로 삽입 정렬을 이용해서 정렬하시오.
'''

input = [4, 6, 2, 9, 1]

def insertion_sort(array):

    # 시간복잡도: O(N^2), 그러나 최선의 경우(입력 값이 이미 정렬이 되어 있는 경우)에는 Ω(N) 만큼의 시간 복잡도
    for i in range(1, len(array)):
        for j in range(i):
            if array[i - j] < array[i - j - 1]:
                array[i - j], array[i - j - 1] = array[i - j], array[i - j -1]
            else : # 이미 앞에 있는 것들은 정렬이 되어 있기 때문에 가능
                break

    return array


insertion_sort(input)
print(input) # [1, 2, 4, 6, 9] 가 되어야 합니다!

print("정답 = [4, 5, 7, 7, 8] / 현재 풀이 값 = ",insertion_sort([5,8,4,7,7]))
print("정답 = [-1, 3, 9, 17] / 현재 풀이 값 = ",insertion_sort([3,-1,17,9]))
print("정답 = [-3, 32, 44, 56, 100] / 현재 풀이 값 = ",insertion_sort([100,56,-3,32,44]))